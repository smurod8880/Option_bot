import asyncio
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class PerformanceMonitor:
    def __init__(self):
        self.bot = None
        self.signals_count = 0
        self.start_time = datetime.now()
        
    def set_bot(self, bot):
        self.bot = bot
        
    def record_signal(self):
        self.signals_count += 1
        
    async def run(self):
        while True:
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
            
            if not self.bot or not self.bot.is_running:
                continue
                
            uptime = datetime.now() - self.start_time
            stats = (
                f"üìä **–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨**\n\n"
                f"‚è± –ê–ø—Ç–∞–π–º: {str(uptime).split('.')[0]}\n"
                f"üìà –°–∏–≥–Ω–∞–ª–æ–≤: {self.signals_count}\n"
                f"üîÑ –¶–∏–∫–ª–æ–≤: {self.bot.risk_manager.signal_counts['hour']}/—á–∞—Å"
            )
            
            try:
                await self.bot.telegram.send_message(stats)
                logger.info("–û—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
